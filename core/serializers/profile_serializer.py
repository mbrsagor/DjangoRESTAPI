from datetime import datetimefrom django.contrib.auth.models import Userfrom drf_role.models import Rolefrom rest_framework import serializersfrom rest_framework.exceptions import ValidationErrorfrom core.models.profile import Profileclass UserSerializer(serializers.ModelSerializer):    class Meta:        model = User        fields = ('id', 'username', 'is_active')class RoleSerializer(serializers.ModelSerializer):    class Meta:        model = Role        fields = ('id', 'name', 'type')class ProfileSerializer(serializers.ModelSerializer):    user = UserSerializer(read_only=True)    role = RoleSerializer(read_only=True)    class Meta:        model = Profile        fields = (            'id', 'user', 'role', 'date_of_birth',            'gender', 'mobile', 'address', 'created_at', 'updated_at'        )class LoginSerializer(serializers.ModelSerializer):    username = serializers.CharField(read_only=True)    password = serializers.CharField(read_only=True)    class Meta:        fields = ('username', 'password')class RegistrationSerializer(serializers.ModelSerializer):    role = serializers.IntegerField(required=False)    username = serializers.CharField(required=True)    password = serializers.CharField(required=True)    email = serializers.EmailField(required=True)    gender = serializers.CharField(required=True)    def validate(self, attrs):        username = attrs.get('username')        email = attrs.get('email')        user_by_username = User.objects.filter(username=username).first()        user_by_email = User.objects.filter(email=email)        if user_by_username:            raise ValidationError({"username": "Username is already exists."})        if user_by_email:            raise ValidationError({"email": "Email is already exists."})        return attrs    class Meta:        model = User        fields = ('role', 'username', 'password', 'email', 'gender')