from django.contrib.auth import authenticatefrom django.contrib.auth.models import Userfrom django.core.exceptions import ObjectDoesNotExistfrom django.db import transactionfrom drf_role.enums import RoleEnumfrom rest_framework.authtoken.models import Tokenfrom rest_framework.viewsets import ModelViewSetfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom rest_framework import statusfrom rest_framework.permissions import AllowAnyfrom core.models.profile import Profilefrom core.serializers.profile_serializer import *class ProfileViewSet(ModelViewSet):    queryset = Profile.objects.filter()    serializer_class = ProfileSerializerclass LoginAPIView(APIView):    permission_classes = [AllowAny]    def post(self, request, *args, **kwargs):        serializer = LoginSerializer(data=request.data)        if serializer.is_valid(raise_exception=True):            username = serializer.validated_data.get('username')            password = serializer.validated_data.get('password')            user = authenticate(username=username, password=password)            try:                profile = Profile.objects.get(user_id=user.pk)                token, _create = Token.objects.get_or_create(user_id=user.pk)                response = {                    'token': token.key,                    'user_role': profile.user.name,                    'user_id': profile.pk,                    'user_name': profile.name,                }                return Response(response)            except (Profile.DoesNotExist, AttributeError):                error_response = {                    'non_fields_error': ['Authentication credentials may be wrong. Please try again.']                }                return Response(error_response)class LogoutAPIView(APIView):    def post(self, request, *args, **kwargs):        response_data = {            'status': status.HTTP_204_NO_CONTENT,            'message': 'Successfully logout.'        }        try:            request.user.auth_token.delete()            return Response(data=response_data)        except (AttributeError, ObjectDoesNotExist):            response_data['status'] = status.HTTP_400_BAD_REQUEST            response_data['message'] = "Failed to logout. Please contact."            return Response(data=response_data)class RegistrationViewSet(ModelViewSet):    permission_classes = (AllowAny,)    serializer_class = RegistrationSerializer    def post(self, request, *args, **kwargs):        serializer = RegistrationSerializer(data=request.data)        if serializer.is_valid(raise_exception=True):            role = serializer.validated_data.get('role')            username = serializer.validated_data.get('username')            password = serializer.validated_data.get('password')            email = serializer.validated_data.get('email')            gender = serializer.validated_data.get('gender')            # create user first            with transaction.atomic():                user = User.objects.create_user(username=username, email=email, password=password)                profile = Profile.objects.create(                    user_id=user.pk,                    role_id=role,                    gender=gender                )                return Response(data=serializer.validated_data, status=status.HTTP_201_CREATED)        return Response(data=request.data, status=status.HTTP_400_BAD_REQUEST)